# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

 ###
 #  summary: Get the status of the service
 #  tags:
 #    - Informational Operations
 #  responses:
 #    200:
 #      description: success
 #      content:
 #        application/json:
 #          schema:
 #           type: object
 #           properties:
 #            status:
 #             type: string
 ###
GET     /health                                             controllers.info.HealthController.health()

 ###
 #  summary: Get the metrics of the service
 #  tags:
 #    - Informational Operations
 #  responses:
 #    200:
 #      description: success
 ###
GET     /metrics                                            controllers.info.MetricsController.metrics()

### NoDocs ###
GET     /                                                   controllers.documentation.SwaggerController.redirectToSwagger

### NoDocs ###
GET     /docs/swagger-ui/*file            controllers.Assets.at(path: String = "/public/lib/swagger-ui", file: String)

### NoDocs ###
GET     /assets/*file                                       controllers.Assets.versioned(path="/public", file: Asset)

 ###
 #  summary: Opens a basket
 #  tags:
 #    - Basket Operations
 #  responses:
 #    200:
 #      description: success
 #      content:
 #        application/json:
 #          schema:
 #           type: object
 #           properties:
 #            basket_id:
 #             type: string
 #             format: UUID
 #  security:
 #      - basicAuth: []
 ###
GET     /basket/open                                        controllers.ShoppingController.openBasket

 ###
 #  summary: Gets the content of a basket
 #  tags:
 #    - Basket Operations
 #  responses:
 #    200:
 #      description: success
 #      content:
 #        application/json:
 #          schema:
 #            $ref: '#/components/schemas/models.Basket'
 #  security:
 #      - basicAuth: []
 ###
GET     /basket/:basketId                                   controllers.ShoppingController.getBasket(basketId: java.util.UUID)

 ###
 #  summary: Adds a product to a basket
 #  tags:
 #    - Basket Operations
 #  responses:
 #    204:
 #      description: success
 #  security:
 #      - basicAuth: []
 ###
PUT     /basket/:basketId/product/:productId                controllers.ShoppingController.addToBasket(basketId: java.util.UUID, productId: java.util.UUID, amount: Int ?= 1)

 ###
 #  summary: Removes a product from a basket
 #  tags:
 #    - Basket Operations
 #  responses:
 #    204:
 #      description: success
 #  security:
 #      - basicAuth: []
 ###
DELETE  /basket/:basketId/product/:productId                controllers.ShoppingController.removeFromBasket(basketId: java.util.UUID, productId: java.util.UUID)

 ###
 #  summary: Increases the amount of a product in a basket
 #  tags:
 #    - Basket Operations
 #  responses:
  #    204:
 #      description: success
 #  security:
 #      - basicAuth: []
 ###
PUT     /basket/:basketId/product/:productId/increase       controllers.ShoppingController.increaseAmount(basketId: java.util.UUID, productId: java.util.UUID, amount: Int ?= 1)
